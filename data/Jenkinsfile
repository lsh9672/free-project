pipeline {
    agent any

    stages {
        stage("Set Variable") {
            steps {
                script {
                    IMAGE_NAME = "sh80165/free-data"
                    IMAGE_STORAGE = "https://registry.hub.docker.com"
                    IMAGE_STORAGE_CREDENTIAL = "docker-hub"
                    // ESLINTIGNORE_PATH = "/var/jenkins_home/workspace/free-frontend"
                    CONTAINER_NAME = "my_fastapi_container"
                    PROJECT_DIR = "data"
                    DOCKER_FILE_PATH = "./data"
                }
            }
        }


        // stage("Node install & build") {
        //     steps {
        //         dir("${ESLINTIGNORE_PATH}"){
        //             sh "pwd"
        //             sh "cp -f eslintignore frontend/"
        //         }
        //     }
        // }
        // stage("env copy") {
        //     steps {
        //         dir("${APPLICATION_ENV_PATH}"){
        //             sh "pwd"
        //             sh "cp -f fronted_env/.env manamana-frontend/frontend/.env"
        //         }
        //     }
        // }

        stage("Clean Container&Image") {
            steps {
                dir("${DOCKER_FILE_PATH}"){
                    
                    // sh "docker compose ps -q | xargs -r docker compose down"
                    // // //컨테이너 확인 후 정지
                    sh "docker ps -f name=${CONTAINER_NAME} -q | xargs --no-run-if-empty docker container stop"

                    // // //컨테이너 삭제
                    sh "docker container ls -a -f name=${CONTAINER_NAME} -q | xargs -r docker container rm"

                    //기존 이미지 삭제
                    sh "docker images ${IMAGE_NAME} -q | xargs -r docker rmi -f"

                }
            }
        }

        stage("Build Container Image") {
            steps {
                dir("${DOCKER_FILE_PATH}"){
                    script {
                        sh "pwd" 
                        sh "cat main.py"
                        sh "docker build --no-cache -t ${IMAGE_NAME} ."
                    }
                }
                
            }
        }

        // stage("Push Container Image") {
        //     steps {
        //         script {
        //             docker.withRegistry("", "${IMAGE_STORAGE_CREDENTIAL}") {
        //                 image.push("latest")
        //             }
        //         }
        //     }
        // }

        stage("Server Run") {
            steps {
                dir("${DOCKER_FILE_PATH}"){
                    sh "docker compose up -d"
                }
            }
        }
    }
}